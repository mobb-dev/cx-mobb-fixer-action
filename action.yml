name: "cx-mobb-fixer-action"
description: "Mobb automatic vulnerability fixer action for Checkmarx One"
branding:
  icon: aperture
  color: blue
inputs:
  cx-api-token:
    description: "your Checkmarx credentials"
    required: true
  mobb-api-token:
    description: "Mobb API token"
    required: true
  github-token:
    description: "GitHub token"
    required: true
  cx-timeout:
    description: "Checkmarx CLI timeout"
    required: false
    default: '5'
outputs:
  fix-report-url:
    description: "Mobb fix report URL"
    value: ${{ steps.run-npx-mobb-dev.outputs.fix-report-url }}
runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v3.6.0
      with:
        node-version: 18

    # This step extracts the Head SHA and stores it in the 'head-sha' variable                
    - id: env 
      name: Set Up Environment
      run: |
        
        OUT=$(curl --header 'authorization: Bearer ${{ inputs.github-token }}' -s ${{github.event.issue.pull_request.url }} | jq -r '.head.sha')
        echo $OUT
        echo "head-sha=$OUT" >> $GITHUB_OUTPUT
        RUN_PATH=$GITHUB_SERVER_URL"/"$GITHUB_REPOSITORY"/actions/runs/"$GITHUB_RUN_ID
        echo RUN_PATH: $RUN_PATH
        echo "action-run-path=$RUN_PATH" >> $GITHUB_OUTPUT
      shell: bash -l {0}


    # Displays status in the PR that this action is in 'pending' status
    - uses: guibranco/github-status-action-v2@v1.1.13
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Analysis"
        state: "pending"
        target_url: ${{ steps.env.outputs.action-run-path }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Mobb fix analysis in progress..." 

    # Extract the scan ID from the Checkmarx comment and use it to generate a Checkmarx json report
    - name: Get Checkmarx Report
      run: |
        SCAN_ID=$(echo "$COMMENT" | sed -n 's/.*scans?id=\([^&]*\).*/\1/p')
        wget https://github.com/Checkmarx/ast-cli/releases/download/2.1.4/ast-cli_linux_x64.tar.gz -O checkmarx.tar.gz
        tar -xf checkmarx.tar.gz
        ./cx configure set --prop-name cx_apikey --prop-value ${{ inputs.cx-api-token }}
        ./cx results show --output-name report --report-format json --scan-id $SCAN_ID --timeout ${{ inputs.cx-timeout }} --debug 
      env:
        COMMENT: ${{ github.event.comment.body }}
      shell: bash -l {0}

    - id: run-npx-mobb-dev
      name: Mobb - Generate Autofix
      run: |
        REPO=$(git remote get-url origin)
        REPO=${REPO%".git"}
        SCANNER=checkmarx
        PR_NUMBER=${{ github.event.issue.number }}
        GITHUB_HEAD_REF=$(curl --header 'authorization: Bearer ${{ inputs.github-token }}' -s ${{github.event.issue.pull_request.url }} | jq -r '.head.ref')
        echo REPO: $REPO
        echo GITHUB_HEAD_REF: $GITHUB_HEAD_REF
        echo GITHUB_SHA: $GITHUB_SHA
        echo PR_NUMBER: $PR_NUMBER
        OUT=$(npx --yes mobbdev@latest review  -r $REPO --ref $GITHUB_HEAD_REF --ch $GITHUB_SHA --api-key ${{ inputs.mobb-api-token }} -f report.json  --pr $PR_NUMBER --github-token ${{ inputs.github-token }} --scanner $SCANNER)
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
          exit $RETVAL
        fi
        OUT=$(echo $OUT | tr '\n' ' ')
        echo "fix-report-url=$OUT" >> $GITHUB_OUTPUT
        echo "Mobb URL: $OUT"
      shell: bash -l {0}

    # Publish the Mobb fix report link in the PR
    - uses: guibranco/github-status-action-v2@v1.1.13
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Report Link"
        state: "success"
        target_url: ${{ steps.run-npx-mobb-dev.outputs.fix-report-url }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Click \"Details\" to access the full fix analysis report" 


    # Displays status in the PR that this action is in 'complete' status
    - uses: guibranco/github-status-action-v2@v1.1.13
      if: success()
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Analysis"
        state: "success"
        target_url: ${{ steps.env.outputs.action-run-path }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Mobb fix analysis completed. See comment in the PR for results" 


    # Displays status in the PR that this action is in 'failure' status
    - uses: guibranco/github-status-action-v2@v1.1.13
      if: failure()
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Analysis"
        state: "failure"
        target_url: ${{ steps.env.outputs.action-run-path }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Mobb fix analysis failed. Click \"Details\" to see console logs" 




